// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pemarsa.Data;

namespace Pemarsa.Data.Migrations
{
    [DbContext(typeof(PemarsaContext))]
    [Migration("20180830205859_nulleables-inspeccion-conexion-formato")]
    partial class nulleablesinspeccionconexionformato
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Pemarsa.Domain.Catalogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CatalogoId");

                    b.Property<int?>("Dia");

                    b.Property<bool?>("Estado");

                    b.Property<string>("Grupo")
                        .IsRequired();

                    b.Property<Guid>("Guid");

                    b.Property<string>("Simbolo");

                    b.Property<string>("Valor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CatalogoId");

                    b.ToTable("Catalogo");
                });

            modelBuilder.Entity("Pemarsa.Domain.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactoCorreo")
                        .IsRequired();

                    b.Property<string>("ContactoNombre")
                        .IsRequired();

                    b.Property<string>("ContactoTelefono")
                        .IsRequired();

                    b.Property<string>("Direccion")
                        .IsRequired();

                    b.Property<int?>("DocumentoAdjuntoId");

                    b.Property<int>("EstadoId");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidResponsable");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<string>("NickName")
                        .IsRequired();

                    b.Property<string>("Nit")
                        .IsRequired();

                    b.Property<string>("NombreResponsable")
                        .IsRequired();

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<string>("RazonSocial")
                        .IsRequired();

                    b.Property<string>("Telefono")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DocumentoAdjuntoId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Pemarsa.Domain.ClienteLinea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activa");

                    b.Property<int>("ClienteId");

                    b.Property<string>("ContactoCorreo")
                        .IsRequired();

                    b.Property<string>("ContactoNombre")
                        .IsRequired();

                    b.Property<string>("ContactoTelefono")
                        .IsRequired();

                    b.Property<string>("Direccion");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClienteLinea");
                });

            modelBuilder.Entity("Pemarsa.Domain.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CampoPadre");

                    b.Property<string>("Campos")
                        .IsRequired();

                    b.Property<string>("CamposBusqueda");

                    b.Property<string>("Condicion");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Tabla")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("Pemarsa.Domain.DetalleSoldadura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amperaje");

                    b.Property<int>("CantidadSoldadura");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int>("Lote");

                    b.Property<int>("ModoAplicacionId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<int>("PresionAcetileno");

                    b.Property<int>("PresionGas1");

                    b.Property<int>("PresionGas2");

                    b.Property<int>("PresionOxigeno");

                    b.Property<int>("TamañoCortadoresId");

                    b.Property<int>("TemperaturaDespuesProceso");

                    b.Property<int>("TemperaturaDuranteProceso");

                    b.Property<int>("TemperaturaPrecalentamiento");

                    b.Property<int>("TiempoAplicacion");

                    b.Property<int>("TiempoPrecalentamiento");

                    b.Property<int>("TipoFuenteId");

                    b.Property<int>("TipoSoldaduraId");

                    b.Property<int>("Voltaje");

                    b.HasKey("Id");

                    b.HasIndex("ModoAplicacionId");

                    b.HasIndex("TamañoCortadoresId");

                    b.HasIndex("TipoFuenteId");

                    b.HasIndex("TipoSoldaduraId");

                    b.ToTable("DetalleSoldadura");
                });

            modelBuilder.Entity("Pemarsa.Domain.DocumentoAdjunto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250);

                    b.Property<bool>("Estado");

                    b.Property<string>("Extension")
                        .IsRequired();

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<int?>("FormatoId");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<string>("Ruta")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FormatoId");

                    b.ToTable("DocumentoAdjunto");
                });

            modelBuilder.Entity("Pemarsa.Domain.Formato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdjuntoId");

                    b.Property<string>("Codigo");

                    b.Property<int?>("ConexionId");

                    b.Property<bool?>("EsFormatoAdjunto");

                    b.Property<int?>("EspecificacionId");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int?>("HerramientaId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<string>("TPF");

                    b.Property<string>("TPI");

                    b.Property<int>("TipoFormatoId");

                    b.Property<int>("Version");

                    b.HasKey("Id");

                    b.HasIndex("AdjuntoId");

                    b.HasIndex("ConexionId");

                    b.HasIndex("EspecificacionId");

                    b.HasIndex("HerramientaId");

                    b.HasIndex("TipoFormatoId");

                    b.ToTable("Formato");
                });

            modelBuilder.Entity("Pemarsa.Domain.FormatoAdendum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FormatoId");

                    b.Property<int>("Posicion");

                    b.Property<int?>("TipoId");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("FormatoId");

                    b.HasIndex("TipoId");

                    b.ToTable("FormatoAdendum");
                });

            modelBuilder.Entity("Pemarsa.Domain.FormatoFormatoParametro", b =>
                {
                    b.Property<int>("FormatoId");

                    b.Property<int>("FormatoParametroId");

                    b.Property<int>("TipoFormatoParametroId");

                    b.HasKey("FormatoId", "FormatoParametroId");

                    b.HasIndex("FormatoParametroId");

                    b.HasIndex("TipoFormatoParametroId");

                    b.ToTable("FormatoFormatoParametro");
                });

            modelBuilder.Entity("Pemarsa.Domain.FormatoParametro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DimensionEspecifica");

                    b.Property<string>("Item");

                    b.Property<string>("Parametro");

                    b.Property<string>("ToleranciaMax");

                    b.Property<string>("ToleranciaMin");

                    b.HasKey("Id");

                    b.ToTable("FormatoParametro");
                });

            modelBuilder.Entity("Pemarsa.Domain.FormatoTiposConexion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Estado");

                    b.Property<int?>("FormatoId");

                    b.Property<int>("TipoConexionId");

                    b.HasKey("Id");

                    b.HasIndex("FormatoId");

                    b.HasIndex("TipoConexionId");

                    b.ToTable("FormatoTiposConexion");
                });

            modelBuilder.Entity("Pemarsa.Domain.Herramienta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClienteId");

                    b.Property<bool?>("EsHerramientaMotor");

                    b.Property<bool>("EsHerramientaPetrolera");

                    b.Property<bool?>("EsHerramientaPorCantidad");

                    b.Property<int?>("EstadoId");

                    b.Property<int?>("EstudioFactibilidadId");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<Guid>("GuidUsuarioVerifica");

                    b.Property<int?>("LineaId");

                    b.Property<int?>("Moc");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioVerifica")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("LineaId");

                    b.ToTable("Herramienta");
                });

            modelBuilder.Entity("Pemarsa.Domain.HerramientaEstudioFactibilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Admin");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int>("HerramientaId");

                    b.Property<bool?>("ManoObra");

                    b.Property<bool?>("Mantenimiento");

                    b.Property<bool?>("Maquina");

                    b.Property<bool?>("Material");

                    b.Property<bool?>("Metodo");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("HerramientaId")
                        .IsUnique();

                    b.ToTable("HerramientaEstudioFactibilidad");
                });

            modelBuilder.Entity("Pemarsa.Domain.HerramientaMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Estado");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int>("HerramientaId");

                    b.Property<int>("MaterialId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("HerramientaId");

                    b.HasIndex("MaterialId");

                    b.ToTable("HerramientaMaterial");
                });

            modelBuilder.Entity("Pemarsa.Domain.HerramientaTamano", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Estado");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int>("HerramientaId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<string>("Tamano")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("HerramientaId");

                    b.ToTable("HerramientaTamano");
                });

            modelBuilder.Entity("Pemarsa.Domain.HerramientaTamanoMotor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Estado");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int>("HerramientaId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<string>("Tamano")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("HerramientaId");

                    b.ToTable("HerramientaTamanoMotor");
                });

            modelBuilder.Entity("Pemarsa.Domain.Inspeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Amperaje");

                    b.Property<int?>("BloqueEscalonadoUsadoId");

                    b.Property<int?>("BobinaMagneticaId");

                    b.Property<int?>("ConcentracionUtilizada");

                    b.Property<int?>("EquipoEmiId");

                    b.Property<bool?>("EstaConforme");

                    b.Property<int?>("EstadoId");

                    b.Property<DateTime?>("FechaDePreparacion");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int?>("ImagenMedicionEspesoresId");

                    b.Property<int?>("ImagenMflId");

                    b.Property<int?>("ImagenPantallaUltrasonidoId");

                    b.Property<int?>("ImagenUltrasonidoDespuesId");

                    b.Property<int?>("ImagenUltrasonidoDuranteId");

                    b.Property<int?>("ImagenUltrasonidoPreviaId");

                    b.Property<bool?>("InspeccionLuzNegra");

                    b.Property<bool?>("InspeccionParticulasMagneticas");

                    b.Property<bool>("InspeccionYoke");

                    b.Property<int?>("IntensidadLuzBlanca");

                    b.Property<int?>("IntensidadLuzNegra");

                    b.Property<int?>("Lote");

                    b.Property<int?>("Lumens");

                    b.Property<int?>("Luxes");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<string>("Observaciones");

                    b.Property<string>("ObservacionesInspeccion");

                    b.Property<int>("Pieza");

                    b.Property<bool?>("SeIdentificaDefecto");

                    b.Property<bool?>("SeRealizoCalibracionEquipo");

                    b.Property<int?>("TemperaturaAmbiente");

                    b.Property<int?>("TemperaturaDePieza");

                    b.Property<int?>("TipoDeLiquidosId");

                    b.Property<int>("TipoInspeccionId");

                    b.Property<int?>("TuboPatronId");

                    b.Property<decimal?>("VelocidadBuggyDrive");

                    b.HasKey("Id");

                    b.HasAlternateKey("Pieza", "TipoInspeccionId", "Id");

                    b.HasIndex("BloqueEscalonadoUsadoId");

                    b.HasIndex("BobinaMagneticaId");

                    b.HasIndex("EquipoEmiId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("ImagenMedicionEspesoresId");

                    b.HasIndex("ImagenMflId");

                    b.HasIndex("ImagenPantallaUltrasonidoId");

                    b.HasIndex("ImagenUltrasonidoDespuesId");

                    b.HasIndex("ImagenUltrasonidoDuranteId");

                    b.HasIndex("ImagenUltrasonidoPreviaId");

                    b.HasIndex("TipoDeLiquidosId");

                    b.HasIndex("TipoInspeccionId");

                    b.HasIndex("TuboPatronId");

                    b.ToTable("Inspeccion");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionConexion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConexionId");

                    b.Property<int?>("EstadoId");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int?>("InspeccionConexionFormatoId");

                    b.Property<int>("InspeccionId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<int>("NumeroConexion");

                    b.Property<string>("Observaciones");

                    b.Property<int?>("TipoConexionId");

                    b.HasKey("Id");

                    b.HasIndex("ConexionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("InspeccionConexionFormatoId");

                    b.HasIndex("InspeccionId");

                    b.HasIndex("TipoConexionId");

                    b.ToTable("InspeccionConexion");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionConexionFormato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.Property<int?>("EquipoUsadoId");

                    b.Property<bool?>("EsBoreBack");

                    b.Property<bool?>("EsCw");

                    b.Property<bool?>("EsEstampado");

                    b.Property<bool?>("EsStandBlasting");

                    b.Property<bool?>("EstaConforme");

                    b.Property<int?>("FloatBoardId");

                    b.Property<int?>("FloatBoardLongitud");

                    b.Property<int?>("FloatValveId");

                    b.Property<int>("FormatoAdjuntoId");

                    b.Property<Guid?>("GuidUsuarioElabora");

                    b.Property<int>("HerramientaId");

                    b.Property<int?>("IdAsignaUsuario");

                    b.Property<string>("NombreUsuarioElabora");

                    b.Property<int?>("OIT");

                    b.Property<int?>("Od");

                    b.Property<string>("Serial");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EquipoUsadoId");

                    b.HasIndex("FloatValveId");

                    b.HasIndex("FormatoAdjuntoId");

                    b.HasIndex("HerramientaId");

                    b.ToTable("InspeccionConexionFormato");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionConexionFormatoAdendum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FormatoAdendumId");

                    b.Property<int>("InspeccionConexionFormatoId");

                    b.HasKey("Id");

                    b.HasIndex("FormatoAdendumId");

                    b.HasIndex("InspeccionConexionFormatoId");

                    b.ToTable("InspeccionConexionFormatoAdendum");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionConexionFormatoParametros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("EstaConforme");

                    b.Property<int>("FormatoParametroId");

                    b.Property<int>("InspeccionConexionFormatoId");

                    b.HasKey("Id");

                    b.HasIndex("FormatoParametroId");

                    b.HasIndex("InspeccionConexionFormatoId");

                    b.ToTable("InspeccionConexionFormatoParametros");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionDimensionalOtro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Conformidad");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int>("InspeccionId");

                    b.Property<string>("MedidaActual");

                    b.Property<string>("MedidaNominal");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<string>("Tolerancia");

                    b.HasKey("Id");

                    b.HasIndex("InspeccionId");

                    b.ToTable("InspeccionDimensionalOtro");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionEquipoUtilizado", b =>
                {
                    b.Property<int>("InspeccionId");

                    b.Property<int>("EquipoUtilizadoId");

                    b.HasKey("InspeccionId", "EquipoUtilizadoId");

                    b.HasIndex("EquipoUtilizadoId");

                    b.ToTable("InspeccionEquipoUtilizado");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionEspesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Desviacion");

                    b.Property<int>("EspesorActual");

                    b.Property<int>("EspesorNominal");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int>("InspeccionId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("InspeccionId");

                    b.ToTable("InspeccionEspesor");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionFotos", b =>
                {
                    b.Property<int>("InspeccionId");

                    b.Property<int>("DocumentoAdjuntoId");

                    b.Property<int>("Pieza");

                    b.Property<bool>("Estado");

                    b.HasKey("InspeccionId", "DocumentoAdjuntoId", "Pieza");

                    b.HasIndex("DocumentoAdjuntoId");

                    b.ToTable("InspeccionFotos");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int>("InspeccionId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<int?>("NumeroLote");

                    b.Property<int?>("TipoInsumoId");

                    b.HasKey("Id");

                    b.HasIndex("InspeccionId");

                    b.HasIndex("TipoInsumoId");

                    b.ToTable("InspeccionInsumo");
                });

            modelBuilder.Entity("Pemarsa.Domain.OrdenTrabajo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cantidad");

                    b.Property<int>("CantidadInspeccionar");

                    b.Property<int>("ClienteId");

                    b.Property<int>("Cotizacion");

                    b.Property<string>("DetallesSolicitud");

                    b.Property<int>("EstadoId");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int?>("HerramientaId");

                    b.Property<int>("LineaId");

                    b.Property<int?>("MaterialId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<string>("ObservacionRemision");

                    b.Property<int?>("OrdenCompra");

                    b.Property<int>("PrioridadId");

                    b.Property<bool>("ProvieneDeSolicitud");

                    b.Property<int>("RemisionCliente");

                    b.Property<int?>("RemisionInicialId");

                    b.Property<int?>("ResponsableId");

                    b.Property<string>("SerialHerramienta");

                    b.Property<string>("SerialMaterial");

                    b.Property<int?>("SolicitudOrdenTrabajoId");

                    b.Property<int?>("TamanoHerramientaId");

                    b.Property<int>("TipoServicioId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("HerramientaId");

                    b.HasIndex("LineaId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PrioridadId");

                    b.HasIndex("RemisionInicialId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("SolicitudOrdenTrabajoId");

                    b.HasIndex("TamanoHerramientaId");

                    b.HasIndex("TipoServicioId");

                    b.ToTable("OrdenTrabajo");
                });

            modelBuilder.Entity("Pemarsa.Domain.OrdenTrabajoAnexos", b =>
                {
                    b.Property<int>("OrdenTrabajoId");

                    b.Property<int>("DocumentoAdjuntoId");

                    b.Property<bool>("Estado");

                    b.HasKey("OrdenTrabajoId", "DocumentoAdjuntoId");

                    b.HasIndex("DocumentoAdjuntoId");

                    b.ToTable("OrdenTrabajoAnexos");
                });

            modelBuilder.Entity("Pemarsa.Domain.OrdenTrabajoHistorialModificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Campo")
                        .IsRequired();

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidUsuarioModifica");

                    b.Property<int>("OrdenTrabajoId");

                    b.Property<string>("UsuarioModifica")
                        .IsRequired();

                    b.Property<string>("ValorAnterior")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrdenTrabajoId");

                    b.ToTable("OrdenTrabajoHistorialModificacion");
                });

            modelBuilder.Entity("Pemarsa.Domain.Parametro", b =>
                {
                    b.Property<string>("Entidad")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Entidad");

                    b.ToTable("Parametro");
                });

            modelBuilder.Entity("Pemarsa.Domain.ParametroCatalogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CatalogoId");

                    b.Property<string>("Entidad");

                    b.HasKey("Id");

                    b.HasIndex("CatalogoId");

                    b.HasIndex("Entidad");

                    b.ToTable("ParametroCatalogo");
                });

            modelBuilder.Entity("Pemarsa.Domain.ParametroConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultaId");

                    b.Property<string>("Entidad");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId");

                    b.HasIndex("Entidad");

                    b.ToTable("ParametroConsulta");
                });

            modelBuilder.Entity("Pemarsa.Domain.Proceso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AplicaEquipoMedicion");

                    b.Property<int>("CantidadInspeccion");

                    b.Property<int?>("DetalleSoldaduraId");

                    b.Property<int?>("EquipoMedicionUtilizadoId");

                    b.Property<bool?>("EsPruebaConGauge");

                    b.Property<int?>("EstadoId");

                    b.Property<DateTime?>("FechaFinalizacion");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOperario");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidPersonaAsignaOperario");

                    b.Property<Guid>("GuidPersonaCompleta");

                    b.Property<Guid>("GuidPersonaLibera");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int?>("InstructivoId");

                    b.Property<int?>("MaquinaAsignadaId");

                    b.Property<string>("NombreOperario");

                    b.Property<string>("NombrePersonaAsignaOperario");

                    b.Property<string>("NombrePersonaCompleta");

                    b.Property<string>("NombrePersonaLibera");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<int?>("NormaId");

                    b.Property<string>("ObservacionRechazo");

                    b.Property<int>("OrdenTrabajoId");

                    b.Property<int?>("ProcesoAnteriorId");

                    b.Property<int?>("ProcesoSiguienteId");

                    b.Property<bool?>("Reasignado");

                    b.Property<int?>("TipoProcesoAnteriorId");

                    b.Property<int?>("TipoProcesoId");

                    b.Property<int?>("TipoProcesoSiguienteId");

                    b.Property<int?>("TipoProcesoSiguienteSugeridoId");

                    b.Property<int?>("TipoSoldaduraId");

                    b.Property<string>("TrabajoRealizado");

                    b.Property<string>("TrabajoRealizar");

                    b.HasKey("Id");

                    b.HasIndex("DetalleSoldaduraId");

                    b.HasIndex("EquipoMedicionUtilizadoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("InstructivoId");

                    b.HasIndex("MaquinaAsignadaId");

                    b.HasIndex("NormaId");

                    b.HasIndex("OrdenTrabajoId");

                    b.HasIndex("ProcesoAnteriorId")
                        .IsUnique();

                    b.HasIndex("ProcesoSiguienteId");

                    b.HasIndex("TipoProcesoAnteriorId");

                    b.HasIndex("TipoProcesoId");

                    b.HasIndex("TipoProcesoSiguienteId");

                    b.HasIndex("TipoProcesoSiguienteSugeridoId");

                    b.HasIndex("TipoSoldaduraId");

                    b.ToTable("Proceso");
                });

            modelBuilder.Entity("Pemarsa.Domain.ProcesoEquipoMedicion", b =>
                {
                    b.Property<int>("IdEquipoMedicion");

                    b.Property<int>("ProcesoId");

                    b.Property<string>("ValorEquipoMedicion");

                    b.HasKey("IdEquipoMedicion", "ProcesoId");

                    b.HasIndex("ProcesoId");

                    b.ToTable("ProcesoEquipoMedicion");
                });

            modelBuilder.Entity("Pemarsa.Domain.ProcesoInspeccionEntrada", b =>
                {
                    b.Property<int>("InspeccionId");

                    b.Property<int>("ProcesoId");

                    b.Property<bool>("Activa");

                    b.HasKey("InspeccionId", "ProcesoId");

                    b.HasIndex("ProcesoId");

                    b.ToTable("ProcesoInspeccionEntrada");
                });

            modelBuilder.Entity("Pemarsa.Domain.ProcesoInspeccionSalida", b =>
                {
                    b.Property<int>("InspeccionId");

                    b.Property<int>("ProcesoId");

                    b.HasKey("InspeccionId", "ProcesoId");

                    b.HasIndex("ProcesoId");

                    b.ToTable("ProcesoInspeccionSalida");
                });

            modelBuilder.Entity("Pemarsa.Domain.ProcesoRealizar", b =>
                {
                    b.Property<int>("TipoProcesoId");

                    b.Property<int>("ProcesoId");

                    b.Property<string>("Valor");

                    b.HasKey("TipoProcesoId", "ProcesoId");

                    b.HasIndex("ProcesoId");

                    b.ToTable("ProcesoRealizar");
                });

            modelBuilder.Entity("Pemarsa.Domain.SolicitudOrdenTrabajo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cantidad");

                    b.Property<int>("CantidadInspeccionar");

                    b.Property<int>("ClienteId");

                    b.Property<string>("Contacto")
                        .IsRequired();

                    b.Property<int>("Cotizacion");

                    b.Property<string>("DetallesSolicitud")
                        .IsRequired();

                    b.Property<int>("EstadoId");

                    b.Property<DateTime?>("FechaModifica");

                    b.Property<DateTime>("FechaRegistro");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidOrganizacion");

                    b.Property<Guid>("GuidUsuarioCrea");

                    b.Property<Guid?>("GuidUsuarioModifica");

                    b.Property<int>("LineaId");

                    b.Property<string>("NombreUsuarioCrea")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("NombreUsuarioModifica")
                        .HasMaxLength(60);

                    b.Property<int>("OrigenSolicitudId");

                    b.Property<int>("PrioridadId");

                    b.Property<int?>("RemisionId");

                    b.Property<int?>("ResponsableId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("LineaId");

                    b.HasIndex("OrigenSolicitudId");

                    b.HasIndex("PrioridadId");

                    b.HasIndex("RemisionId");

                    b.HasIndex("ResponsableId");

                    b.ToTable("SolicitudOrdenTrabajo");
                });

            modelBuilder.Entity("Pemarsa.Domain.SolicitudOrdenTrabajoAnexos", b =>
                {
                    b.Property<int>("SolicitudOrdenTrabajoId");

                    b.Property<int>("DocumentoAdjuntoId");

                    b.Property<bool>("Estado");

                    b.HasKey("SolicitudOrdenTrabajoId", "DocumentoAdjuntoId");

                    b.HasIndex("DocumentoAdjuntoId");

                    b.ToTable("SolicitudOrdenTrabajoAnexos");
                });

            modelBuilder.Entity("Pemarsa.Domain.Catalogo", b =>
                {
                    b.HasOne("Pemarsa.Domain.Catalogo")
                        .WithMany("SubCatalogos")
                        .HasForeignKey("CatalogoId");
                });

            modelBuilder.Entity("Pemarsa.Domain.Cliente", b =>
                {
                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "Rut")
                        .WithMany()
                        .HasForeignKey("DocumentoAdjuntoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.ClienteLinea", b =>
                {
                    b.HasOne("Pemarsa.Domain.Cliente", "Cliente")
                        .WithMany("Lineas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.DetalleSoldadura", b =>
                {
                    b.HasOne("Pemarsa.Domain.Catalogo", "ModoAplicacion")
                        .WithMany()
                        .HasForeignKey("ModoAplicacionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "TamanoCortadores")
                        .WithMany()
                        .HasForeignKey("TamañoCortadoresId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoFuente")
                        .WithMany()
                        .HasForeignKey("TipoFuenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoSoldadura")
                        .WithMany()
                        .HasForeignKey("TipoSoldaduraId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.DocumentoAdjunto", b =>
                {
                    b.HasOne("Pemarsa.Domain.Formato")
                        .WithMany("Planos")
                        .HasForeignKey("FormatoId");
                });

            modelBuilder.Entity("Pemarsa.Domain.Formato", b =>
                {
                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "Adjunto")
                        .WithMany()
                        .HasForeignKey("AdjuntoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Conexion")
                        .WithMany()
                        .HasForeignKey("ConexionId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Especificacion")
                        .WithMany()
                        .HasForeignKey("EspecificacionId");

                    b.HasOne("Pemarsa.Domain.Herramienta", "Herramienta")
                        .WithMany()
                        .HasForeignKey("HerramientaId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoFormato")
                        .WithMany()
                        .HasForeignKey("TipoFormatoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.FormatoAdendum", b =>
                {
                    b.HasOne("Pemarsa.Domain.Formato", "Formato")
                        .WithMany("Adendum")
                        .HasForeignKey("FormatoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId");
                });

            modelBuilder.Entity("Pemarsa.Domain.FormatoFormatoParametro", b =>
                {
                    b.HasOne("Pemarsa.Domain.Formato", "Formato")
                        .WithMany("FormatoFormatoParametro")
                        .HasForeignKey("FormatoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.FormatoParametro", "FormatoParametro")
                        .WithMany()
                        .HasForeignKey("FormatoParametroId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoFormatoParametro")
                        .WithMany()
                        .HasForeignKey("TipoFormatoParametroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.FormatoTiposConexion", b =>
                {
                    b.HasOne("Pemarsa.Domain.Formato", "Formato")
                        .WithMany("FormatoTiposConexion")
                        .HasForeignKey("FormatoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoConexion")
                        .WithMany()
                        .HasForeignKey("TipoConexionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.Herramienta", b =>
                {
                    b.HasOne("Pemarsa.Domain.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Pemarsa.Domain.ClienteLinea", "Linea")
                        .WithMany()
                        .HasForeignKey("LineaId");
                });

            modelBuilder.Entity("Pemarsa.Domain.HerramientaEstudioFactibilidad", b =>
                {
                    b.HasOne("Pemarsa.Domain.Herramienta", "Herramienta")
                        .WithOne("HerramientaEstudioFactibilidad")
                        .HasForeignKey("Pemarsa.Domain.HerramientaEstudioFactibilidad", "HerramientaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.HerramientaMaterial", b =>
                {
                    b.HasOne("Pemarsa.Domain.Herramienta", "Herramienta")
                        .WithMany("Materiales")
                        .HasForeignKey("HerramientaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.HerramientaTamano", b =>
                {
                    b.HasOne("Pemarsa.Domain.Herramienta", "Herramienta")
                        .WithMany("TamanosHerramienta")
                        .HasForeignKey("HerramientaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.HerramientaTamanoMotor", b =>
                {
                    b.HasOne("Pemarsa.Domain.Herramienta", "Herramienta")
                        .WithMany("TamanosMotor")
                        .HasForeignKey("HerramientaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.Inspeccion", b =>
                {
                    b.HasOne("Pemarsa.Domain.Catalogo", "BloqueEscalonadoUsado")
                        .WithMany()
                        .HasForeignKey("BloqueEscalonadoUsadoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "BobinaMagnetica")
                        .WithMany()
                        .HasForeignKey("BobinaMagneticaId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "EquipoEmi")
                        .WithMany()
                        .HasForeignKey("EquipoEmiId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "ImagenMedicionEspesores")
                        .WithMany()
                        .HasForeignKey("ImagenMedicionEspesoresId");

                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "ImagenMfl")
                        .WithMany()
                        .HasForeignKey("ImagenMflId");

                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "ImagenPantallaUltrasonido")
                        .WithMany()
                        .HasForeignKey("ImagenPantallaUltrasonidoId");

                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "ImagenUltrasonidoDespues")
                        .WithMany()
                        .HasForeignKey("ImagenUltrasonidoDespuesId");

                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "ImagenUltrasonidoDurante")
                        .WithMany()
                        .HasForeignKey("ImagenUltrasonidoDuranteId");

                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "ImagenUltrasonidoPrevia")
                        .WithMany()
                        .HasForeignKey("ImagenUltrasonidoPreviaId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoDeLiquidos")
                        .WithMany()
                        .HasForeignKey("TipoDeLiquidosId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoInspeccion")
                        .WithMany()
                        .HasForeignKey("TipoInspeccionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "TuboPatron")
                        .WithMany()
                        .HasForeignKey("TuboPatronId");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionConexion", b =>
                {
                    b.HasOne("Pemarsa.Domain.Catalogo", "Conexion")
                        .WithMany()
                        .HasForeignKey("ConexionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Pemarsa.Domain.InspeccionConexionFormato", "InspeccionConexionFormato")
                        .WithMany()
                        .HasForeignKey("InspeccionConexionFormatoId");

                    b.HasOne("Pemarsa.Domain.Inspeccion", "Inspeccion")
                        .WithMany("Conexiones")
                        .HasForeignKey("InspeccionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoConexion")
                        .WithMany()
                        .HasForeignKey("TipoConexionId");
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionConexionFormato", b =>
                {
                    b.HasOne("Pemarsa.Domain.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "EquipoUsado")
                        .WithMany()
                        .HasForeignKey("EquipoUsadoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "FloatValve")
                        .WithMany()
                        .HasForeignKey("FloatValveId");

                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "FormatoAdjunto")
                        .WithMany()
                        .HasForeignKey("FormatoAdjuntoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Herramienta", "Herramienta")
                        .WithMany()
                        .HasForeignKey("HerramientaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionConexionFormatoAdendum", b =>
                {
                    b.HasOne("Pemarsa.Domain.FormatoAdendum", "FormatoAdendum")
                        .WithMany()
                        .HasForeignKey("FormatoAdendumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.InspeccionConexionFormato", "InspeccionConexionFormato")
                        .WithMany("InspeccionConexionFormatoAdendum")
                        .HasForeignKey("InspeccionConexionFormatoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionConexionFormatoParametros", b =>
                {
                    b.HasOne("Pemarsa.Domain.FormatoParametro", "FormatoParametro")
                        .WithMany()
                        .HasForeignKey("FormatoParametroId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.InspeccionConexionFormato", "InspeccionConexionFormato")
                        .WithMany("InspeccionConexionFormatoParametros")
                        .HasForeignKey("InspeccionConexionFormatoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionDimensionalOtro", b =>
                {
                    b.HasOne("Pemarsa.Domain.Inspeccion", "Inspeccion")
                        .WithMany("Dimensionales")
                        .HasForeignKey("InspeccionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionEquipoUtilizado", b =>
                {
                    b.HasOne("Pemarsa.Domain.Catalogo", "EquipoUtilizado")
                        .WithMany()
                        .HasForeignKey("EquipoUtilizadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Inspeccion", "Inspeccion")
                        .WithMany("InspeccionEquipoUtilizado")
                        .HasForeignKey("InspeccionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionEspesor", b =>
                {
                    b.HasOne("Pemarsa.Domain.Inspeccion", "Inspeccion")
                        .WithMany("Espesores")
                        .HasForeignKey("InspeccionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionFotos", b =>
                {
                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "DocumentoAdjunto")
                        .WithMany("InspeccionFotos")
                        .HasForeignKey("DocumentoAdjuntoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Inspeccion", "Inspeccion")
                        .WithMany("InspeccionFotos")
                        .HasForeignKey("InspeccionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.InspeccionInsumo", b =>
                {
                    b.HasOne("Pemarsa.Domain.Inspeccion", "Inspeccion")
                        .WithMany("Insumos")
                        .HasForeignKey("InspeccionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoInsumo")
                        .WithMany()
                        .HasForeignKey("TipoInsumoId");
                });

            modelBuilder.Entity("Pemarsa.Domain.OrdenTrabajo", b =>
                {
                    b.HasOne("Pemarsa.Domain.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Herramienta", "Herramienta")
                        .WithMany()
                        .HasForeignKey("HerramientaId");

                    b.HasOne("Pemarsa.Domain.ClienteLinea", "Linea")
                        .WithMany()
                        .HasForeignKey("LineaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.HerramientaMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Prioridad")
                        .WithMany()
                        .HasForeignKey("PrioridadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "RemisionInicial")
                        .WithMany()
                        .HasForeignKey("RemisionInicialId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId");

                    b.HasOne("Pemarsa.Domain.SolicitudOrdenTrabajo", "SolicitudOrdenTrabajo")
                        .WithMany()
                        .HasForeignKey("SolicitudOrdenTrabajoId");

                    b.HasOne("Pemarsa.Domain.HerramientaTamano", "TamanoHerramienta")
                        .WithMany()
                        .HasForeignKey("TamanoHerramientaId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoServicio")
                        .WithMany()
                        .HasForeignKey("TipoServicioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.OrdenTrabajoAnexos", b =>
                {
                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "DocumentoAdjunto")
                        .WithMany()
                        .HasForeignKey("DocumentoAdjuntoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.OrdenTrabajo", "OrdenTrabajo")
                        .WithMany("Anexos")
                        .HasForeignKey("OrdenTrabajoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.OrdenTrabajoHistorialModificacion", b =>
                {
                    b.HasOne("Pemarsa.Domain.OrdenTrabajo", "OrdenTrabajo")
                        .WithMany("HistorialModificaciones")
                        .HasForeignKey("OrdenTrabajoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.ParametroCatalogo", b =>
                {
                    b.HasOne("Pemarsa.Domain.Catalogo", "Catalogo")
                        .WithMany()
                        .HasForeignKey("CatalogoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Parametro", "Parametro")
                        .WithMany()
                        .HasForeignKey("Entidad");
                });

            modelBuilder.Entity("Pemarsa.Domain.ParametroConsulta", b =>
                {
                    b.HasOne("Pemarsa.Domain.Consulta", "Consulta")
                        .WithMany()
                        .HasForeignKey("ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Parametro", "Parametro")
                        .WithMany()
                        .HasForeignKey("Entidad");
                });

            modelBuilder.Entity("Pemarsa.Domain.Proceso", b =>
                {
                    b.HasOne("Pemarsa.Domain.DetalleSoldadura", "DetalleSoldadura")
                        .WithMany()
                        .HasForeignKey("DetalleSoldaduraId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "EquipoMedicionUtilizado")
                        .WithMany()
                        .HasForeignKey("EquipoMedicionUtilizadoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Instructivo")
                        .WithMany()
                        .HasForeignKey("InstructivoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "MaquinaAsignada")
                        .WithMany()
                        .HasForeignKey("MaquinaAsignadaId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Norma")
                        .WithMany()
                        .HasForeignKey("NormaId");

                    b.HasOne("Pemarsa.Domain.OrdenTrabajo", "OrdenTrabajo")
                        .WithMany("Procesos")
                        .HasForeignKey("OrdenTrabajoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Proceso", "ProcesoAnterior")
                        .WithOne()
                        .HasForeignKey("Pemarsa.Domain.Proceso", "ProcesoAnteriorId");

                    b.HasOne("Pemarsa.Domain.Proceso", "ProcesoSiguiente")
                        .WithMany()
                        .HasForeignKey("ProcesoSiguienteId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoProcesoAnterior")
                        .WithMany()
                        .HasForeignKey("TipoProcesoAnteriorId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoProceso")
                        .WithMany()
                        .HasForeignKey("TipoProcesoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoProcesoSiguiente")
                        .WithMany()
                        .HasForeignKey("TipoProcesoSiguienteId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoProcesoSiguienteSugerido")
                        .WithMany()
                        .HasForeignKey("TipoProcesoSiguienteSugeridoId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoSoldadura")
                        .WithMany()
                        .HasForeignKey("TipoSoldaduraId");
                });

            modelBuilder.Entity("Pemarsa.Domain.ProcesoEquipoMedicion", b =>
                {
                    b.HasOne("Pemarsa.Domain.Catalogo", "EquipoMedicion")
                        .WithMany()
                        .HasForeignKey("IdEquipoMedicion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Proceso", "Proceso")
                        .WithMany("ProcesoEquipoMedicion")
                        .HasForeignKey("ProcesoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.ProcesoInspeccionEntrada", b =>
                {
                    b.HasOne("Pemarsa.Domain.Inspeccion", "Inspeccion")
                        .WithMany("ProcesoInspeccionEntrada")
                        .HasForeignKey("InspeccionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Proceso", "Proceso")
                        .WithMany("InspeccionEntrada")
                        .HasForeignKey("ProcesoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.ProcesoInspeccionSalida", b =>
                {
                    b.HasOne("Pemarsa.Domain.Inspeccion", "Inspeccion")
                        .WithMany("ProcesoInspeccionSalida")
                        .HasForeignKey("InspeccionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Proceso", "Proceso")
                        .WithMany("ProcesoInspeccionSalida")
                        .HasForeignKey("ProcesoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.ProcesoRealizar", b =>
                {
                    b.HasOne("Pemarsa.Domain.Proceso", "Proceso")
                        .WithMany("ProcesoRealizar")
                        .HasForeignKey("ProcesoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "TipoProceso")
                        .WithMany()
                        .HasForeignKey("TipoProcesoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pemarsa.Domain.SolicitudOrdenTrabajo", b =>
                {
                    b.HasOne("Pemarsa.Domain.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.ClienteLinea", "ClienteLinea")
                        .WithMany()
                        .HasForeignKey("LineaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "OrigenSolicitud")
                        .WithMany()
                        .HasForeignKey("OrigenSolicitudId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.Catalogo", "Prioridad")
                        .WithMany()
                        .HasForeignKey("PrioridadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "Remision")
                        .WithMany()
                        .HasForeignKey("RemisionId");

                    b.HasOne("Pemarsa.Domain.Catalogo", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId");
                });

            modelBuilder.Entity("Pemarsa.Domain.SolicitudOrdenTrabajoAnexos", b =>
                {
                    b.HasOne("Pemarsa.Domain.DocumentoAdjunto", "DocumentoAdjunto")
                        .WithMany("SolicitudOrdenTrabajoAnexos")
                        .HasForeignKey("DocumentoAdjuntoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pemarsa.Domain.SolicitudOrdenTrabajo", "SolicitudOrdenTrabajo")
                        .WithMany("Anexos")
                        .HasForeignKey("SolicitudOrdenTrabajoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
